{"version":3,"sources":["Accenture-logo.png","Accenture-logo-top.png","Accenture-logo-bottom.png","components/landing-section.js","components/who-accenture.jsx","components/click-away.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","DeconstructedLogo","className","src","AccentureLogo","alt","whoAreAccenture","state","name","Component","ClickAbout","showWho","showWhat","showHow","showCommunityImpact","showAwards","showSuccessStories","hideComponent","bind","this","setState","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uIAAAA,EAAOC,QAAU,IAA0B,4C,yFCA3CD,EAAOC,QAAU,IAA0B,gD,gBCA3CD,EAAOC,QAAU,IAA0B,mD,kHCqB5BC,EAdW,WAMtB,OACI,6BAASC,UAAU,kBACf,yBAAKC,IAAKC,IAAeC,IAAI,GAAGH,UAAU,mBAC1C,iD,mCCQGI,E,kDArBX,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,KAAM,WAHI,E,qDAOd,OACI,6BACJ,wBAAIN,UAAU,mBAAd,gP,GAV0BO,aC4DfC,E,kDA1DX,aAAe,IAAD,8BACV,gBACKH,MAAQ,CACTC,KAAM,iBACNG,SAAS,EACTC,UAAU,EACVC,SAAS,EACTC,qBAAqB,EACrBC,YAAY,EACZC,oBAAoB,GAExB,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,gBAXX,E,0DAcAV,GACV,OAAOA,GACH,IAAK,UACDW,KAAKC,SAAS,CAAET,SAAUQ,KAAKC,SAAST,UACxCQ,KAAKC,SAAS,CACVR,UAAU,EACVC,SAAS,EACTC,qBAAqB,EACrBC,YAAY,EACZC,oBAAoB,IAExB,MACJ,IAAK,WACDG,KAAKC,SAAS,CAAET,SAAUQ,KAAKC,SAASR,WACxCO,KAAKC,SAAS,CACVT,SAAS,EACTE,SAAS,EACTC,qBAAqB,EACrBC,YAAY,EACZC,oBAAoB,O,+BAK1B,IAAD,SACwBG,KAAKZ,MAA1BI,EADH,EACGA,QAASE,EADZ,EACYA,QACjB,OACI,6BACA,yBAAKX,UAAU,cAAcmB,QAAS,kBAAM,EAAKJ,cAAc,aAA/D,QAGA,yBAAKf,UAAU,cAAcmB,QAAS,kBAAM,EAAKJ,cAAc,aAA/D,QAGA,yBAAKf,UAAU,0BACbS,GAAW,kBAAC,EAAD,MACXE,GAAW,kBAAC,EAAD,Y,GAnDAJ,aCWVa,MATf,WACE,OACE,yBAAKpB,UAAU,OACd,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGeqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.dc8441c3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Accenture-logo.5e54eda5.png\";","module.exports = __webpack_public_path__ + \"static/media/Accenture-logo-top.f0ae6811.png\";","module.exports = __webpack_public_path__ + \"static/media/Accenture-logo-bottom.8d29d4d5.png\";","import React, { useRef, useEffect, useState } from 'react';\nimport AccentureLogo1 from '/Users/timothyangus/code/TimAngus321/accenture-coding-challenge/src/Accenture-logo-top.png'\nimport AccentureLogo2 from '/Users/timothyangus/code/TimAngus321/accenture-coding-challenge/src/Accenture-logo-bottom.png'\nimport AccentureLogo from '/Users/timothyangus/code/TimAngus321/accenture-coding-challenge/src/Accenture-logo.png';\nimport gsap from 'gsap';\n\n\nconst DeconstructedLogo = () => {\n\n\n\n    \n\n    return (\n        <section className=\"logo-component\">\n            <img src={AccentureLogo} alt=\"\" className=\"accenture-logo\"/>\n            <h3>About Accenture</h3> \n        </section>\n    )\n}\n\nexport default DeconstructedLogo;","import React, { Component } from 'react';\n\nclass whoAreAccenture extends Component {\n    constructor() {\n      super();\n      this.state = {\n        name: 'showWho'\n      };\n    }\n    render() {\n    return (\n        <div>\n    <h4 className=\"whoAreAccenture\">\n        \n\"Across the globe, one thing is universally true of the people of Accenture: We care deeply about what we do and the impact we have with our clients and communities. It is personal to all of us.\"\n\nJulie Sweet\nChief Executive Officer\n    </h4>\n    </div>\n    )\n}\n}\n\nexport default whoAreAccenture;","import React, { Component } from 'react';\nimport WhoAreAccenture from './who-accenture.jsx';\n\nclass ClickAbout extends Component {\n    constructor() {\n        super();\n        this.state = {\n            name: 'aboutAccenture',\n            showWho: false,\n            showWhat: false,\n            showHow: false,\n            showCommunityImpact: false,\n            showAwards: false,\n            showSuccessStories: false\n        };\n        this.hideComponent = this.hideComponent.bind(this);\n    }\n\n    hideComponent(name) {\n        switch(name) {\n            case \"showWho\":\n                this.setState({ showWho: !this.setState.showWho });\n                this.setState({ \n                    showWhat: false,\n                    showHow: false,\n                    showCommunityImpact: false,\n                    showAwards: false,\n                    showSuccessStories: false\n                });\n                break;\n            case \"showWhat\":\n                this.setState({ showWho: !this.setState.showWhat });\n                this.setState({ \n                    showWho: false,\n                    showHow: false,\n                    showCommunityImpact: false,\n                    showAwards: false,\n                    showSuccessStories: false\n                });\n        }\n    }\n\n    render() {\n        const { showWho, showHow } = this.state;\n        return (\n            <div>\n            <div className=\"abt-acc-btn\" onClick={() => this.hideComponent(\"showWho\")}>\n             Who?\n            </div>\n            <div className=\"abt-acc-btn\" onClick={() => this.hideComponent(\"showHow\")}>\n             How?\n            </div>\n            <div className=\"reveal-about-accenture\">\n            { showWho && <WhoAreAccenture /> }\n            { showHow && <WhoAreAccenture /> }\n            </div>\n            </div>\n        )\n    }\n\n}\n\nexport default ClickAbout;","import React from 'react';\nimport './App.scss';\nimport DeconstructedLogo from './components/landing-section';\nimport ClickAway from '/Users/timothyangus/code/TimAngus321/accenture-coding-challenge/src/components/click-away.jsx';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <DeconstructedLogo />\n     <ClickAway />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}